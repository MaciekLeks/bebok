const std = @import("std");
const Superblock = @import("../../types.zig").Superblock;

pub fn createMockSupeblock(allocator: std.mem.Allocator) !*Superblock {
    const mock = try allocator.create(Superblock);
    mock.* = .{
        .inodes_count = 0,
        .blocks_count = 0,
        .rsrvd_blocks_count = 0,
        .free_blocks_count = 0,
        .free_inodes_count = 0,
        .first_data_block = 0,
        .log_block_size = 0,
        .log_frag_size = 0,
        .blocks_per_group = 0,
        .frags_per_group = 0,
        .inodes_per_group = 0,
        .mount_time = 0,
        .write_time = 0,
        .mount_count = 0,
        .max_mount_count = 0,
        .magic = 0,
        .state = .unknown,
        .errors = .do_continue,
        .minor_rev_level = 0,
        .last_check = 0,
        .check_interval = 0,
        .creator_os = .os_other,
        .major_rev_level = .dynamic,
        .def_resuid = 0,
        .def_resgid = 0,
        .first_ino = 0,
        .inode_size = 0,
        .block_group_nr = 0,
        .feature_compat = .{ .ext_attr = true, .resize_inode = true, .dir_index = true },
        .feature_incompat = .{ .file_type = true },
        .feature_ro_compat = .{ .sparse_super = true, .large_file = true },
        .uuid = 0,
        .volume_name = [_]u8{0} ** 16,
        .last_mounted = [_]u8{0} ** 64,
        .algo_bitmap = .{},
        .prealloc_blocks = 0,
        .prealloc_dir_blocks = 0,
        .rsrvd_a = [_]u8{0} ** 2,
        .journal_uuid = 0,
        .journal_inum = 0,
        .journal_dev = 0,
        .last_orphan = 0,
        .hash_seed = [_]u32{0} ** 4,
        .def_hash_version = 0,
        .rsrvd_b = [_]u8{0} ** 3,
        .default_mount_options = 0,
        .first_meta_bg = 0,
        .rsrvd_c = [_]u8{0} ** 760,
    };
    return mock;
}
